#blocked = #triton_gpu.blocked<{sizePerThread = [1, 16], threadsPerWarp = [4, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [16, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0)
#mma = #triton_gpu.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [1, 4], instrShape = [16, 16], isTransposed = false}>
#shared = #triton_gpu.shared<{vec = 16, perPhase = 1, maxPhase = 16, order = [1, 0], hasLeadingOffset = false}>
#shared1 = #triton_gpu.shared<{vec = 16, perPhase = 1, maxPhase = 16, order = [0, 1], hasLeadingOffset = false}>
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "hip:gfx942", "triton_gpu.threads-per-warp" = 64 : i32} {
  tt.func public @_triton_gemm_a8w8_kernel(%arg0: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg1: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg3: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg4: !tt.ptr<f16> {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg5: i32 loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":78:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<16x64xi32, #mma> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c255_i32 = arith.constant 255 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %c15_i32 = arith.constant 15 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<16xf16, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<64xf16, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg5, %c15_i32 : i32 loc(#loc56)
    %2 = arith.divsi %1, %c16_i32 : i32 loc(#loc57)
    %3 = arith.addi %arg6, %c63_i32 : i32 loc(#loc58)
    %4 = arith.divsi %3, %c64_i32 : i32 loc(#loc59)
    %5 = arith.divsi %0, %4 : i32 loc(#loc7)
    %6 = arith.subi %2, %5 : i32 loc(#loc8)
    %7 = arith.minsi %6, %c1_i32 : i32 loc(#loc9)
    %8 = arith.remsi %0, %7 : i32 loc(#loc10)
    %9 = arith.addi %5, %8 : i32 loc(#loc11)
    %10 = arith.remsi %0, %4 : i32 loc(#loc12)
    %11 = arith.divsi %10, %7 : i32 loc(#loc13)
    %12 = arith.muli %9, %c16_i32 : i32 loc(#loc14)
    %13 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %15 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc16)
    %16 = tt.splat %12 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc16)
    %17 = arith.addi %15, %13 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc16)
    %18 = arith.addi %16, %14 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc16)
    %19 = arith.muli %11, %c64_i32 : i32 loc(#loc17)
    %20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc18)
    %21 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc18)
    %22 = tt.splat %19 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc19)
    %23 = tt.splat %19 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc19)
    %24 = arith.addi %22, %20 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc19)
    %25 = arith.addi %23, %21 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc19)
    %26 = tt.splat %arg5 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc20)
    %27 = tt.splat %arg5 : i32 -> tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc20)
    %28 = arith.remsi %17, %26 {tt.contiguity = dense<16> : tensor<1xi32>, tt.divisibility = dense<16> : tensor<1xi32>} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc20)
    %29 = tt.splat %arg6 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc21)
    %30 = tt.splat %arg6 : i32 -> tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc21)
    %31 = arith.remsi %24, %29 {tt.contiguity = dense<64> : tensor<1xi32>, tt.divisibility = dense<64> : tensor<1xi32>} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc21)
    %32 = tt.expand_dims %28 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc22)
    %33 = tt.splat %arg8 : i32 -> tensor<16x1xi32, #blocked> loc(#loc22)
    %34 = arith.muli %32, %33 : tensor<16x1xi32, #blocked> loc(#loc22)
    %35 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc23)
    %36 = tt.expand_dims %35 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc22)
    %37 = tt.broadcast %34 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc22)
    %38 = tt.broadcast %36 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc22)
    %39 = arith.addi %37, %38 : tensor<16x256xi32, #blocked> loc(#loc22)
    %40 = tt.addptr %arg0, %c0_i32 : !tt.ptr<i8>, i32 loc(#loc22)
    %41 = tt.expand_dims %31 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc24)
    %42 = tt.splat %arg9 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc24)
    %43 = arith.muli %41, %42 : tensor<1x64xi32, #blocked1> loc(#loc24)
    %44 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc25)
    %45 = tt.expand_dims %44 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc24)
    %46 = tt.broadcast %43 : tensor<1x64xi32, #blocked1> -> tensor<256x64xi32, #blocked1> loc(#loc24)
    %47 = tt.broadcast %45 : tensor<256x1xi32, #blocked1> -> tensor<256x64xi32, #blocked1> loc(#loc24)
    %48 = arith.addi %46, %47 : tensor<256x64xi32, #blocked1> loc(#loc24)
    %49 = tt.addptr %arg1, %c0_i32 : !tt.ptr<i8>, i32 loc(#loc24)
    %50 = arith.addi %arg7, %c255_i32 : i32 loc(#loc60)
    %51 = arith.divsi %50, %c256_i32 : i32 loc(#loc61)
    %52 = tt.splat %40 : !tt.ptr<i8> -> tensor<16x256x!tt.ptr<i8>, #blocked> loc(#loc27)
    %53 = tt.addptr %52, %39 : tensor<16x256x!tt.ptr<i8>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc27)
    %54 = tt.load %53 : tensor<16x256x!tt.ptr<i8>, #blocked> loc(#loc27)
    %55 = triton_gpu.local_alloc %54 : (tensor<16x256xi8, #blocked>) -> !tt.memdesc<16x256xi8, #shared, #triton_gpu.shared_memory, mutable> loc(#loc27)
    %56 = tt.splat %49 : !tt.ptr<i8> -> tensor<256x64x!tt.ptr<i8>, #blocked1> loc(#loc28)
    %57 = tt.addptr %56, %48 : tensor<256x64x!tt.ptr<i8>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc28)
    %58 = tt.load %57 : tensor<256x64x!tt.ptr<i8>, #blocked1> loc(#loc28)
    %59 = triton_gpu.local_alloc %58 : (tensor<256x64xi8, #blocked1>) -> !tt.memdesc<256x64xi8, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc28)
    %60 = tt.addptr %40, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc29)
    %61 = tt.addptr %49, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc30)
    %62 = arith.subi %51, %c1_i32 : i32 loc(#loc31)
    %63:3 = scf.for %arg11 = %c0_i32 to %62 step %c1_i32 iter_args(%arg12 = %cst, %arg13 = %60, %arg14 = %61) -> (tensor<16x64xi32, #mma>, !tt.ptr<i8>, !tt.ptr<i8>)  : i32 {
      %110 = tt.splat %arg13 : !tt.ptr<i8> -> tensor<16x256x!tt.ptr<i8>, #blocked> loc(#loc27)
      %111 = tt.addptr %110, %39 : tensor<16x256x!tt.ptr<i8>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc27)
      %112 = tt.load %111 : tensor<16x256x!tt.ptr<i8>, #blocked> loc(#loc27)
      %113 = tt.splat %arg14 : !tt.ptr<i8> -> tensor<256x64x!tt.ptr<i8>, #blocked1> loc(#loc28)
      %114 = tt.addptr %113, %48 : tensor<256x64x!tt.ptr<i8>, #blocked1>, tensor<256x64xi32, #blocked1> loc(#loc28)
      %115 = tt.load %114 : tensor<256x64x!tt.ptr<i8>, #blocked1> loc(#loc28)
      %116 = triton_gpu.local_load %55 : !tt.memdesc<16x256xi8, #shared, #triton_gpu.shared_memory, mutable> -> tensor<16x256xi8, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc27)
      %117 = triton_gpu.local_load %59 : !tt.memdesc<256x64xi8, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<256x64xi8, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc28)
      %118 = tt.dot %116, %117, %arg12 : tensor<16x256xi8, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<256x64xi8, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<16x64xi32, #mma> loc(#loc32)
      %119 = tt.addptr %arg13, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc29)
      %120 = tt.addptr %arg14, %c256_i32 : !tt.ptr<i8>, i32 loc(#loc30)
      triton_gpu.local_store %112, %55 : tensor<16x256xi8, #blocked> -> !tt.memdesc<16x256xi8, #shared, #triton_gpu.shared_memory, mutable> loc(#loc27)
      triton_gpu.local_store %115, %59 : tensor<256x64xi8, #blocked1> -> !tt.memdesc<256x64xi8, #shared1, #triton_gpu.shared_memory, mutable> loc(#loc28)
      scf.yield %118, %119, %120 : tensor<16x64xi32, #mma>, !tt.ptr<i8>, !tt.ptr<i8> loc(#loc33)
    } loc(#loc31)
    %64 = triton_gpu.local_load %55 : !tt.memdesc<16x256xi8, #shared, #triton_gpu.shared_memory, mutable> -> tensor<16x256xi8, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> loc(#loc27)
    %65 = triton_gpu.local_load %59 : !tt.memdesc<256x64xi8, #shared1, #triton_gpu.shared_memory, mutable> -> tensor<256x64xi8, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> loc(#loc28)
    %66 = tt.dot %64, %65, %63#0 : tensor<16x256xi8, #triton_gpu.dot_op<{opIdx = 0, parent = #mma, kWidth = 16}>> * tensor<256x64xi8, #triton_gpu.dot_op<{opIdx = 1, parent = #mma, kWidth = 16}>> -> tensor<16x64xi32, #mma> loc(#loc32)
    %67 = tt.addptr %arg3, %12 : !tt.ptr<f16>, i32 loc(#loc34)
    %68 = tt.addptr %arg4, %19 : !tt.ptr<f16>, i32 loc(#loc35)
    %69 = arith.cmpi slt, %18, %27 : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %70 = tt.splat %67 : !tt.ptr<f16> -> tensor<16x!tt.ptr<f16>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %71 = tt.addptr %70, %14 : tensor<16x!tt.ptr<f16>, #triton_gpu.slice<{dim = 1, parent = #mma}>>, tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %72 = tt.load %71, %69, %cst_0 cacheModifier = cg : tensor<16x!tt.ptr<f16>, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %73 = arith.extf %72 : tensor<16xf16, #triton_gpu.slice<{dim = 1, parent = #mma}>> to tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> loc(#loc38)
    %74 = arith.cmpi slt, %25, %30 : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc39)
    %75 = tt.splat %68 : !tt.ptr<f16> -> tensor<64x!tt.ptr<f16>, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc40)
    %76 = tt.addptr %75, %21 : tensor<64x!tt.ptr<f16>, #triton_gpu.slice<{dim = 0, parent = #mma}>>, tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc40)
    %77 = tt.load %76, %74, %cst_1 cacheModifier = cg : tensor<64x!tt.ptr<f16>, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc40)
    %78 = arith.extf %77 : tensor<64xf16, #triton_gpu.slice<{dim = 0, parent = #mma}>> to tensor<64xf32, #triton_gpu.slice<{dim = 0, parent = #mma}>> loc(#loc41)
    %79 = tt.expand_dims %73 {axis = 1 : i32} : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<16x1xf32, #mma> loc(#loc42)
    %80 = arith.sitofp %66 : tensor<16x64xi32, #mma> to tensor<16x64xf32, #mma> loc(#loc43)
    %81 = tt.broadcast %79 : tensor<16x1xf32, #mma> -> tensor<16x64xf32, #mma> loc(#loc43)
    %82 = arith.mulf %80, %81 : tensor<16x64xf32, #mma> loc(#loc43)
    %83 = tt.expand_dims %78 {axis = 0 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xf32, #mma> loc(#loc44)
    %84 = tt.broadcast %83 : tensor<1x64xf32, #mma> -> tensor<16x64xf32, #mma> loc(#loc45)
    %85 = arith.mulf %82, %84 : tensor<16x64xf32, #mma> loc(#loc45)
    %86 = arith.truncf %85 : tensor<16x64xf32, #mma> to tensor<16x64xf16, #mma> loc(#loc46)
    %87 = tt.expand_dims %18 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<16x1xi32, #mma> loc(#loc47)
    %88 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #mma}>> -> tensor<16x1xi32, #mma> loc(#loc48)
    %89 = tt.splat %arg5 : i32 -> tensor<16x1xi32, #mma> loc(#loc49)
    %90 = arith.cmpi slt, %87, %89 : tensor<16x1xi32, #mma> loc(#loc49)
    %91 = tt.expand_dims %25 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc50)
    %92 = tt.expand_dims %21 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc51)
    %93 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #mma> loc(#loc52)
    %94 = arith.cmpi slt, %91, %93 : tensor<1x64xi32, #mma> loc(#loc52)
    %95 = tt.broadcast %90 : tensor<16x1xi1, #mma> -> tensor<16x64xi1, #mma> loc(#loc53)
    %96 = tt.broadcast %94 : tensor<1x64xi1, #mma> -> tensor<16x64xi1, #mma> loc(#loc53)
    %97 = arith.andi %95, %96 : tensor<16x64xi1, #mma> loc(#loc53)
    %98 = arith.muli %arg10, %12 : i32 loc(#loc48)
    %99 = tt.splat %arg10 : i32 -> tensor<16x1xi32, #mma> loc(#loc48)
    %100 = arith.muli %99, %88 : tensor<16x1xi32, #mma> loc(#loc48)
    %101 = tt.addptr %arg2, %98 : !tt.ptr<f16>, i32 loc(#loc48)
    %102 = arith.extsi %100 : tensor<16x1xi32, #mma> to tensor<16x1xi64, #mma> loc(#loc48)
    %103 = tt.broadcast %102 : tensor<16x1xi64, #mma> -> tensor<16x64xi64, #mma> loc(#loc51)
    %104 = tt.broadcast %92 : tensor<1x64xi32, #mma> -> tensor<16x64xi32, #mma> loc(#loc51)
    %105 = tt.addptr %101, %19 : !tt.ptr<f16>, i32 loc(#loc51)
    %106 = arith.extsi %104 : tensor<16x64xi32, #mma> to tensor<16x64xi64, #mma> loc(#loc51)
    %107 = arith.addi %106, %103 : tensor<16x64xi64, #mma> loc(#loc51)
    %108 = tt.splat %105 : !tt.ptr<f16> -> tensor<16x64x!tt.ptr<f16>, #mma> loc(#loc54)
    %109 = tt.addptr %108, %107 : tensor<16x64x!tt.ptr<f16>, #mma>, tensor<16x64xi64, #mma> loc(#loc54)
    tt.store %109, %86, %97 : tensor<16x64x!tt.ptr<f16>, #mma> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":110:24)
#loc3 = loc("/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language/standard.py":40:22)
#loc4 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":111:27)
#loc5 = loc("/opt/conda/envs/py_3.10/lib/python3.10/site-packages/triton/language/standard.py":40:28)
#loc6 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":112:27)
#loc7 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":114:22)
#loc8 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":116:35)
#loc9 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":116:48)
#loc10 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":117:33)
#loc11 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":117:27)
#loc12 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":118:19)
#loc13 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":118:40)
#loc14 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":124:17)
#loc15 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":124:40)
#loc16 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":124:27)
#loc17 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":125:17)
#loc18 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":125:40)
#loc19 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":125:27)
#loc20 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":126:48)
#loc21 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":127:48)
#loc22 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":129:18)
#loc23 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":129:48)
#loc24 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":130:18)
#loc25 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":130:48)
#loc26 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":136:24)
#loc27 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":143:20)
#loc28 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":144:20)
#loc29 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":148:18)
#loc30 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":149:18)
#loc31 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":140:22)
#loc32 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":146:33)
#loc33 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":149:8)
#loc34 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":166:37)
#loc35 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":167:37)
#loc36 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":168:55)
#loc37 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":168:24)
#loc38 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":168:93)
#loc39 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":169:55)
#loc40 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":169:24)
#loc41 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":169:93)
#loc42 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":170:42)
#loc43 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":170:32)
#loc44 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":171:42)
#loc45 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":171:32)
#loc46 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":172:23)
#loc47 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":175:22)
#loc48 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":176:17)
#loc49 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":175:33)
#loc50 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":175:47)
#loc51 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":176:48)
#loc52 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":175:58)
#loc53 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":175:39)
#loc54 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":177:21)
#loc55 = loc("/triton_dev/triton/283_int8_gemm_perf_investigation/test_int8_gemm.py":177:4)
#loc56 = loc(callsite(#loc3 at #loc4))
#loc57 = loc(callsite(#loc5 at #loc4))
#loc58 = loc(callsite(#loc3 at #loc6))
#loc59 = loc(callsite(#loc5 at #loc6))
#loc60 = loc(callsite(#loc3 at #loc26))
#loc61 = loc(callsite(#loc5 at #loc26))
